name: gcov2lcov-action

description: "convert golang coverage to lcov format"

inputs:
  infile:
    description: "go coverage input file"
    required: false
    default: coverage.out
  outfile:
    description: "lcov output file"
    required: false
    default: coverage.lcov
  version:
    description: "gcov2lcov version"
    required: false
    default: latest
  working-directory:
    description: "change working directory"
    required: false
  github-token:
    description: "GitHub token for API authentication. Defaults to the automatic GitHub token for improved rate limits."
    required: false
    default: ${{ github.token }}

runs:
  using: composite
  steps:
    - shell: bash
      run: |
        set -xe
        if [ "${{inputs.version}}" == "latest" ]; then
          URL="https://api.github.com/repos/jandelgado/gcov2lcov/releases/latest"
        else
          URL="https://api.github.com/repos/jandelgado/gcov2lcov/releases/tags/${{inputs.version}}"
        fi
        AUTH_HEADER=""
        if [ -n "${{ inputs.github-token }}" ]; then
          echo "Using authenticated GitHub API request"
          AUTH_HEADER="Authorization: Bearer ${{ inputs.github-token }}"
        else
          echo "Using unauthenticated GitHub API request" 
        fi
        
        PACKAGE_URL=$(curl ${AUTH_HEADER:+-H "$AUTH_HEADER"} "$URL" | jq -r '[ .assets[] | select(.name | test("gcov2lcov.*linux.amd64.tar.gz")) | .browser_download_url ] | first ')
        
        # starting with version v1.1.0 gcov2lcov changed it's artefact naming a bit.
        # we are gentle and support also the old naming convetion
        curl -sLf "$PACKAGE_URL" | tar zxf -
        mv bin/gcov2lcov-linux-amd64 gcov2lcov > /dev/null 2>&1 || true  # before v1.1.0

      working-directory: /tmp
    - shell: bash
      run: 'set -x && GOROOT=$(go env GOROOT) /tmp/gcov2lcov -infile "${{ inputs.infile }}" -outfile "${{ inputs.outfile }}"'
      working-directory: ${{ inputs.working-directory }}
